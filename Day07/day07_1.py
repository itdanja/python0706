
# 함수 : 미리 작성된 코드 ( 왜? )
    # 목적 : 1.재활용성[ 여러번 사용되는 코드 묶음 ]
                # 1번 사용되는 코드는 함수화 X
            #2. 인수[함수로들어오는 데이터]
                #   반환[ 함수가 종료되면서 돌려주는 데이터 ]
                # 함수[ 메모리 저장위치 => 스택 ] : 스택 : 함수 실행시 메모리 할당 , 종료시 메모리 초기화
            #3. 메모리 효율적으로 사용

# 함수 형태
    # 함수호출시
    # 1. 함수명( )                  # 출력   print( )
            # ( : 시작   ) : 끝
    # 함수만들기
    # 2. def 함수명( ) :        [ define : 정의하다 ]

# 함수 만들기
def 주소함수(  ) :
    print("서울시 신촌 1번지 ")
    print("파이썬 빌딩 7층 ")
    print("홍길동")

# 함수 호출
주소함수()

# 함수 사용 이유 : 반복사용[재활용] <-----> for비교[ 떨어져있는 코드에서는 재호출 어려움 ]
주소함수()
주소함수()
주소함수()
for i in range(3) :
    print("서울시 신촌 1번지 ")
    print("파이썬 빌딩 7층 ")
    print("홍길동")

# 함수 인수 : 외부로부터 함수로 들어오는 데이터
def 주소함수2( 이름 ) :
    print("서울시 신촌 1번지")
    print("파이썬 빌딩 7층")
    print(이름)

# 인수 전달
주소함수2( "유재석" )
주소함수2( "신동엽")
주소함수2( "강호동" )

#함수 여러개 인수  : def 함수이름( 인수1 , 인수2 , 인수3 , 인수4 ~~~~ )
def 합계함수( 시작 , 끝 ) :
    # 누적합계
    sum = 0
    for i in range( 시작 , 끝+1 ) :
        sum += i
    print( "합계 : " , sum )

# 함수호출
합계함수( 1 , 100 )
합계함수( 1 , 1000 )

# 함수 반환 : 함수 밖으로 나오는 데이터[메모리]
def 입력() :
    return 2 # return 돌려주는값

결과 =  입력() # 반환된 2 를 결과변수에 저자
print( 결과 )

#
def 홀짝함수( 숫자 ) :
    if 숫자%2 == 0 :
        print(숫자,"는 짝수 입니다")
        return # 함수 종료 [ 돌려주는 데이터 없이 그냥 종료 ]
    print(숫자,"는 홀수 입니다 ")
    return

홀짝함수(10)
홀짝함수(15)

#문제1 : max함수
def max함수( 인수1 , 인수2 ) :
    if 인수1 > 인수2 :
        return 인수1
    elif 인수1 < 인수2 :
        return 인수2
    else:
        return 0

print("더 큰수는 ", max함수( 3 , 4 ) )
print("더 큰수는 ",  max함수( 7 , 5) )
print("더 큰수는 ",  max함수( 7 , 7) )


















